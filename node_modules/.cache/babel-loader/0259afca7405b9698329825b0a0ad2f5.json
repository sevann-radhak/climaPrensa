{"ast":null,"code":"// Constants\nimport { CLOUD, SUN, RAIN, SNOW, FOG, THUNDER, DRIZZLE } from './../constants/weather'; // Get the icon\n\nconst getWeatherState = weatherData => {\n  const id = weatherData.id;\n\n  if (id < 300) {\n    return THUNDER;\n  } else if (id < 400) {\n    return DRIZZLE;\n  } else if (id < 600) {\n    return RAIN;\n  } else if (id < 700) {\n    return SNOW;\n  } else if (id === 741) {\n    return FOG;\n  } else if (id === 800) {\n    return SUN;\n  } else {\n    return CLOUD;\n  }\n}; // Transform data from API promise\n\n\nconst transforWeather = weatherData => {\n  const city = \"\".concat(weatherData.name, \" - \").concat(weatherData.sys.country);\n  var _weatherData$main = weatherData.main,\n      humidity = _weatherData$main.humidity,\n      temp = _weatherData$main.temp;\n  const speed = weatherData.wind.speed;\n  const weatherState = getWeatherState(weatherData.weather[0]); // const {weatherState} = weatherData.weather[0].main;\n  // Redondear a máximo solo 1 decimal\n\n  temp = Number(temp.toFixed(1)); // New data info\n\n  const data = {\n    city,\n    data: {\n      humidity,\n      temperature: temp,\n      weatherState,\n      wind: \"\".concat(speed, \" m/s\")\n    }\n  };\n  return data;\n};\n\nexport default transforWeather;","map":{"version":3,"sources":["/home/miriam/dev/sevann/CursoUdemy/PrensaEstudiantil/prensa-estudiantil/src/services/transformWeather.js"],"names":["CLOUD","SUN","RAIN","SNOW","FOG","THUNDER","DRIZZLE","getWeatherState","weatherData","id","transforWeather","city","name","sys","country","main","humidity","temp","speed","wind","weatherState","weather","Number","toFixed","data","temperature"],"mappings":"AAAA;AACA,SAASA,KAAT,EAAgBC,GAAhB,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,OAAtC,EAA+CC,OAA/C,QAA8D,wBAA9D,C,CAEA;;AACA,MAAMC,eAAe,GAAIC,WAAD,IAAiB;AAAA,QAC9BC,EAD8B,GACxBD,WADwB,CAC9BC,EAD8B;;AAGrC,MAAGA,EAAE,GAAG,GAAR,EAAY;AACR,WAAOJ,OAAP;AACH,GAFD,MAEO,IAAGI,EAAE,GAAG,GAAR,EAAY;AACf,WAAOH,OAAP;AACH,GAFM,MAEA,IAAIG,EAAE,GAAG,GAAT,EAAc;AACjB,WAAOP,IAAP;AACH,GAFM,MAEA,IAAIO,EAAE,GAAG,GAAT,EAAa;AAChB,WAAON,IAAP;AACH,GAFM,MAEA,IAAIM,EAAE,KAAK,GAAX,EAAe;AAClB,WAAOL,GAAP;AACH,GAFM,MAEA,IAAIK,EAAE,KAAK,GAAX,EAAe;AAClB,WAAOR,GAAP;AACH,GAFM,MAEA;AACH,WAAOD,KAAP;AACH;AACJ,CAlBD,C,CAoBA;;;AACA,MAAMU,eAAe,GAAGF,WAAW,IAAI;AACnC,QAAMG,IAAI,aAAMH,WAAW,CAACI,IAAlB,gBAA4BJ,WAAW,CAACK,GAAZ,CAAgBC,OAA5C,CAAV;AADmC,0BAEZN,WAAW,CAACO,IAFA;AAAA,MAE9BC,QAF8B,qBAE9BA,QAF8B;AAAA,MAEpBC,IAFoB,qBAEpBA,IAFoB;AAAA,QAG5BC,KAH4B,GAGnBV,WAAW,CAACW,IAHO,CAG5BD,KAH4B;AAInC,QAAME,YAAY,GAAGb,eAAe,CAACC,WAAW,CAACa,OAAZ,CAAoB,CAApB,CAAD,CAApC,CAJmC,CAKnC;AAEA;;AACAJ,EAAAA,IAAI,GAAGK,MAAM,CAACL,IAAI,CAACM,OAAL,CAAa,CAAb,CAAD,CAAb,CARmC,CAUnC;;AACA,QAAMC,IAAI,GAAG;AACTb,IAAAA,IADS;AAETa,IAAAA,IAAI,EAAE;AACFR,MAAAA,QADE;AAEFS,MAAAA,WAAW,EAAER,IAFX;AAGFG,MAAAA,YAHE;AAIFD,MAAAA,IAAI,YAAKD,KAAL;AAJF;AAFG,GAAb;AAUA,SAAOM,IAAP;AACH,CAtBD;;AAwBA,eAAed,eAAf","sourcesContent":["// Constants\nimport { CLOUD, SUN, RAIN, SNOW, FOG, THUNDER, DRIZZLE } from './../constants/weather';\n\n// Get the icon\nconst getWeatherState = (weatherData) => {\n    const {id} = weatherData;\n\n    if(id < 300){\n        return THUNDER;\n    } else if(id < 400){\n        return DRIZZLE;\n    } else if( id < 600 ){\n        return RAIN;\n    } else if( id < 700){\n        return SNOW;\n    } else if( id === 741){\n        return FOG;\n    } else if( id === 800){\n        return SUN;\n    } else {\n        return CLOUD;\n    }\n}\n\n// Transform data from API promise\nconst transforWeather = weatherData => {\n    const city = `${weatherData.name} - ${weatherData.sys.country}`;\n    var {humidity, temp} = weatherData.main;\n    const {speed} = weatherData.wind;\n    const weatherState = getWeatherState(weatherData.weather[0]);\n    // const {weatherState} = weatherData.weather[0].main;\n\n    // Redondear a máximo solo 1 decimal\n    temp = Number(temp.toFixed(1));\n\n    // New data info\n    const data = {\n        city,\n        data: {\n            humidity,\n            temperature: temp,\n            weatherState,\n            wind: `${speed} m/s`\n        }\n    }\n\n    return data;\n}\n\nexport default transforWeather;"]},"metadata":{},"sourceType":"module"}