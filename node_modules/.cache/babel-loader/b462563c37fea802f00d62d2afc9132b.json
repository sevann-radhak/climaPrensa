{"ast":null,"code":"var _jsxFileName = \"/home/miriam/dev/sevann/CursoUdemy/PrensaEstudiantil/prensa-estudiantil/src/components/WeatherLocation/index.js\";\nimport React, { Component } from 'react'; // Proptypes\n\nimport PropTypes from 'prop-types'; // Redux\n// import {store} from './store';\n\nimport { connect } from 'react-redux'; // Redux - actions\n\nimport { setCity } from './../actions'; // Data\n// Cities for exploring weather\n\nimport { cities } from './../../data/cities'; // Styles\n\nimport './style.css';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // Components\n\nimport Location from './Location';\nimport WeatherData from './WeatherData'; // Services\n\nimport getWeather from '../../services/getUrlWeatherByCity';\nimport transforWeather from './../../services/transformWeather';\n\nclass WeatherLocation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUpdateClick = () => {\n      // Random with possible cities\n      const random = (Math.random() * (cities.length - 1)).toFixed();\n      const location = cities[random];\n      const apiWeather = getWeather(location); // Fetch promise to get current weather\n\n      fetch(apiWeather).then(resolve => {\n        return resolve.json();\n      }).then(data => {\n        // In case of error\n        if (data.cod !== 200) {\n          return null;\n        } // Apply tranforms to new data\n\n\n        let newData = transforWeather(data);\n        this.setState({\n          city: newData.city,\n          data: newData.data\n        }); // Redux - store\n\n        this.props.setCity(this.state.city);\n      }).catch(err => {\n        console.log('hubo error');\n      });\n    };\n\n    this.showWeatherComponent = () => {\n      const _this$state = this.state,\n            city = _this$state.city,\n            data = _this$state.data;\n\n      if (city && data) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(Location, {\n          city: city,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }), React.createElement(WeatherData, {\n          data: data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"align-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn green-background mt-2 align-center\",\n          onClick: this.handleUpdateClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"Explorar\")));\n      }\n\n      return React.createElement(CircularProgress, {\n        size: 60,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      });\n    };\n\n    const _city = this.props.city; // Initial State\n\n    this.state = {\n      city: _city,\n      data: null\n    };\n  } // Component did mount to charge Bucaramanga weather\n\n\n  componentDidMount() {\n    const apiWeather = getWeather(this.state.city); // Fetch promise to get current weather\n\n    fetch(apiWeather).then((resolve, rejected) => {\n      return resolve.json();\n    }).then(data => {\n      // In case of error\n      if (data.cod !== 200) {\n        return null;\n      } // Apply tranforms to new data\n\n\n      let newData = transforWeather(data);\n      this.setState({\n        city: newData.city,\n        data: newData.data\n      });\n    }).catch(err => {\n      console.log('hubo error');\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"weather-location-cont\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.showWeatherComponent());\n  }\n\n} // PropTypes\n\n\nWeatherLocation.propTypes = {\n  city: PropTypes.string.isRequired,\n  setCity: PropTypes.func.isRequired // Connect\n\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setCity: value => dispatch(setCity(value))\n});\n\nexport default connect(null, mapDispatchToProps)(WeatherLocation);","map":{"version":3,"sources":["/home/miriam/dev/sevann/CursoUdemy/PrensaEstudiantil/prensa-estudiantil/src/components/WeatherLocation/index.js"],"names":["React","Component","PropTypes","connect","setCity","cities","CircularProgress","Location","WeatherData","getWeather","transforWeather","WeatherLocation","constructor","props","handleUpdateClick","random","Math","length","toFixed","location","apiWeather","fetch","then","resolve","json","data","cod","newData","setState","city","state","catch","err","console","log","showWeatherComponent","componentDidMount","rejected","render","propTypes","string","isRequired","func","mapDispatchToProps","dispatch","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;;AACA,SAAQC,OAAR,QAAsB,cAAtB,C,CAEA;AACA;;AACA,SAAQC,MAAR,QAAqB,qBAArB,C,CAEA;;AACA,OAAO,aAAP;AACA,OAAOC,gBAAP,MAA6B,oCAA7B,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;;AAGA,MAAMC,eAAN,SAA8BV,SAA9B,CAAwC;AACpCW,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAuClBC,iBAvCkB,GAuCE,MAAK;AACrB;AACA,YAAMC,MAAM,GAAG,CAACC,IAAI,CAACD,MAAL,MAAeV,MAAM,CAACY,MAAP,GAAe,CAA9B,CAAD,EAAmCC,OAAnC,EAAf;AACA,YAAMC,QAAQ,GAAGd,MAAM,CAACU,MAAD,CAAvB;AAEA,YAAMK,UAAU,GAAGX,UAAU,CAACU,QAAD,CAA7B,CALqB,CAOrB;;AACAE,MAAAA,KAAK,CAACD,UAAD,CAAL,CAAkBE,IAAlB,CAAwBC,OAAO,IAAI;AAC/B,eAAOA,OAAO,CAACC,IAAR,EAAP;AACH,OAFD,EAGCF,IAHD,CAGMG,IAAI,IAAI;AACV;AACA,YAAGA,IAAI,CAACC,GAAL,KAAa,GAAhB,EAAoB;AAChB,iBAAO,IAAP;AACH,SAJS,CAMV;;;AACA,YAAIC,OAAO,GAAGjB,eAAe,CAACe,IAAD,CAA7B;AAEA,aAAKG,QAAL,CAAc;AACVC,UAAAA,IAAI,EAAEF,OAAO,CAACE,IADJ;AAEVJ,UAAAA,IAAI,EAAEE,OAAO,CAACF;AAFJ,SAAd,EATU,CAcV;;AACA,aAAKZ,KAAL,CAAWT,OAAX,CAAmB,KAAK0B,KAAL,CAAWD,IAA9B;AACH,OAnBD,EAoBCE,KApBD,CAoBQC,GAAD,IAAS;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,OAtBD;AAuBH,KAtEiB;;AAAA,SAyFlBC,oBAzFkB,GAyFK,MAAM;AAAA,0BACJ,KAAKL,KADD;AAAA,YAClBD,IADkB,eAClBA,IADkB;AAAA,YACZJ,IADY,eACZA,IADY;;AAGzB,UAAGI,IAAI,IAAIJ,IAAX,EAAgB;AACZ,eACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,QAAD;AAAU,UAAA,IAAI,EAAEI,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,oBAAC,WAAD;AAAa,UAAA,IAAI,EAAEJ,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,EAGI;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAQ,UAAA,SAAS,EAAC,wCAAlB;AAA2D,UAAA,OAAO,EAAE,KAAKX,iBAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CAHJ,CADJ;AASH;;AAED,aAAO,oBAAC,gBAAD;AAAkB,QAAA,IAAI,EAAE,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAzGiB;;AAAA,UAGPe,KAHO,GAGC,KAAKhB,KAHN,CAGPgB,IAHO,EAKd;;AACA,SAAKC,KAAL,GAAa;AACTD,MAAAA,IAAI,EAAJA,KADS;AAETJ,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH,GAXmC,CAapC;;;AACAW,EAAAA,iBAAiB,GAAE;AACf,UAAMhB,UAAU,GAAGX,UAAU,CAAC,KAAKqB,KAAL,CAAWD,IAAZ,CAA7B,CADe,CAGf;;AACAR,IAAAA,KAAK,CAACD,UAAD,CAAL,CAAkBE,IAAlB,CAAwB,CAACC,OAAD,EAAUc,QAAV,KAAuB;AAC3C,aAAOd,OAAO,CAACC,IAAR,EAAP;AACH,KAFD,EAGCF,IAHD,CAGMG,IAAI,IAAI;AACV;AACA,UAAGA,IAAI,CAACC,GAAL,KAAa,GAAhB,EAAoB;AAChB,eAAO,IAAP;AACH,OAJS,CAMV;;;AACA,UAAIC,OAAO,GAAGjB,eAAe,CAACe,IAAD,CAA7B;AAEA,WAAKG,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAEF,OAAO,CAACE,IADJ;AAEVJ,QAAAA,IAAI,EAAEE,OAAO,CAACF;AAFJ,OAAd;AAIH,KAhBD,EAiBCM,KAjBD,CAiBQC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,KAnBD;AAoBH;;AAsEDI,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKH,oBAAL,EADL,CADJ;AAKH;;AAlHmC,C,CAqHxC;;;AACAxB,eAAe,CAAC4B,SAAhB,GAA4B;AACxBV,EAAAA,IAAI,EAAE3B,SAAS,CAACsC,MAAV,CAAiBC,UADC;AAExBrC,EAAAA,OAAO,EAAEF,SAAS,CAACwC,IAAV,CAAeD,UAFA,CAK5B;;AAL4B,CAA5B;;AAMA,MAAME,kBAAkB,GAAGC,QAAQ,KAAK;AACtCxC,EAAAA,OAAO,EAAEyC,KAAK,IAAID,QAAQ,CAACxC,OAAO,CAACyC,KAAD,CAAR;AADY,CAAL,CAAnC;;AAIA,eAAe1C,OAAO,CAAC,IAAD,EAAOwC,kBAAP,CAAP,CAAkChC,eAAlC,CAAf","sourcesContent":["import React, {Component} from 'react';\n\n// Proptypes\nimport PropTypes from 'prop-types';\n \n// Redux\n// import {store} from './store';\nimport {connect} from 'react-redux';\n// Redux - actions\nimport {setCity} from './../actions';\n\n// Data\n// Cities for exploring weather\nimport {cities} from './../../data/cities';\n\n// Styles\nimport './style.css';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// Components\nimport Location from './Location';\nimport WeatherData from './WeatherData';\n\n// Services\nimport getWeather from '../../services/getUrlWeatherByCity';\nimport transforWeather from './../../services/transformWeather';\n\n\nclass WeatherLocation extends Component {\n    constructor(props){\n        super(props);\n\n        const {city} = this.props; \n\n        // Initial State\n        this.state = {\n            city,\n            data: null\n        };\n    }\n\n    // Component did mount to charge Bucaramanga weather\n    componentDidMount(){\n        const apiWeather = getWeather(this.state.city);\n\n        // Fetch promise to get current weather\n        fetch(apiWeather).then( (resolve, rejected) => {\n            return resolve.json();\n        })\n        .then(data => { \n            // In case of error\n            if(data.cod !== 200){\n                return null;\n            }\n\n            // Apply tranforms to new data\n            let newData = transforWeather(data);\n            \n            this.setState({ \n                city: newData.city,\n                data: newData.data\n            });\n        })\n        .catch((err) => {\n            console.log('hubo error');\n        });\n    }\n\n    handleUpdateClick = () =>{\n        // Random with possible cities\n        const random = (Math.random()*(cities.length -1)).toFixed();\n        const location = cities[random];\n\n        const apiWeather = getWeather(location);\n\n        // Fetch promise to get current weather\n        fetch(apiWeather).then( resolve => {\n            return resolve.json();\n        })\n        .then(data => {\n            // In case of error\n            if(data.cod !== 200){\n                return null;\n            }\n            \n            // Apply tranforms to new data\n            let newData = transforWeather(data);\n            \n            this.setState({ \n                city: newData.city,\n                data: newData.data\n            });\n            \n            // Redux - store\n            this.props.setCity(this.state.city);\n        })\n        .catch((err) => {\n            console.log('hubo error');\n        });\n    }\n\n    // Example of promise\n    // promesa(){\n    //     console.log('comienza la promesa');\n    //     let promesa = new Promise( (resolve, rejected) => {\n    //         setTimeout(() => {\n    //             rejected(\"Fracaso total mijo!\");\n    //         }, 2000 );\n    //     });\n\n    //     promesa.then( (mensaje) => {\n    //         console.log(mensaje);    \n    //     })\n    //     .catch((error) => {\n    //         console.log(error);\n    //     })\n    // }\n\n    showWeatherComponent = () => {\n        const {city, data} = this.state;\n\n        if(city && data){\n            return(\n                <React.Fragment>\n                    <Location city={city} />\n                    <WeatherData data={data} />\n                    <div className=\"align-center\">\n                        <button className=\"btn green-background mt-2 align-center\" onClick={this.handleUpdateClick}>Explorar</button>\n                    </div>\n                 </React.Fragment>\n            );\n        }\n\n        return(<CircularProgress size={60} />); \n    }\n\n    render() { \n        return (\n            <div className=\"weather-location-cont\">\n                {this.showWeatherComponent()}\n            </div>\n        );\n    }\n}\n\n// PropTypes\nWeatherLocation.propTypes = {\n    city: PropTypes.string.isRequired,\n    setCity: PropTypes.func.isRequired\n}\n\n// Connect\nconst mapDispatchToProps = dispatch => ({\n  setCity: value => dispatch(setCity(value))\n});\n \nexport default connect(null, mapDispatchToProps)(WeatherLocation);"]},"metadata":{},"sourceType":"module"}